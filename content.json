{"meta":{"title":"LoveInShenZhen","subtitle":null,"description":null,"author":"IT写轮眼","url":"http://loveinshenzhen.github.io","root":"/"},"pages":[{"title":"About","date":"2019-05-13T14:56:47.390Z","updated":"2019-05-13T14:56:47.390Z","comments":true,"path":"about/index.html","permalink":"http://loveinshenzhen.github.io/about/index.html","excerpt":"","text":""},{"title":"Categories","date":"2019-05-13T14:56:47.391Z","updated":"2019-05-13T14:56:47.391Z","comments":true,"path":"categories/index.html","permalink":"http://loveinshenzhen.github.io/categories/index.html","excerpt":"","text":""},{"title":"Tags","date":"2019-05-13T14:56:47.392Z","updated":"2019-05-13T14:56:47.392Z","comments":true,"path":"tags/index.html","permalink":"http://loveinshenzhen.github.io/tags/index.html","excerpt":"","text":""}],"posts":[{"title":"新建项目","slug":"create_new_prj","date":"2019-05-16T09:01:35.000Z","updated":"2019-05-16T09:01:44.206Z","comments":true,"path":"2019/05/16/create_new_prj/","link":"","permalink":"http://loveinshenzhen.github.io/2019/05/16/create_new_prj/","excerpt":"","text":"构建依赖 subversion, 获取项目工程模板时会用到 安装好 JDK 1.8+ 安装好 Gradle 5.x 创建项目 现在假定我们创建一个叫 Hello 的应用. 从 LoveInShenZhen/ProjectTemplates 获取工程模板. 1svn export https://github.com/LoveInShenZhen/ProjectTemplates.git/trunk/vertx-web-simple Hello 项目目录结构 项目工程的目录结构如下, 具体的目录和配置文件的说明, 请阅读 ToDo 文档. 1234567891011121314151617181920212223242526272829├── build.gradle.kts├── conf│ ├── application.conf│ ├── logback.xml│ ├── route│ ├── vertx-default-jul-logging.properties│ └── vertxOptions.json├── gradle│ └── wrapper│ ├── gradle-wrapper.jar│ └── gradle-wrapper.properties├── gradlew├── gradlew.bat├── settings.gradle.kts└── src └── main ├── kotlin │ ├── com │ │ └── api │ │ └── server │ │ ├── ApiServer.kt │ │ └── controller │ │ ├── Sample.kt │ │ └── reply │ │ └── HelloReply.kt │ └── models │ └── User.kt └── resources └── ebean.mf 运行项目 123456# 进入到工程目录cd Hello# 构建项目, 下载依赖gradle build# 运行项目gradle run 查看自动生成的APi测试页面 查看自动生成的API文档页面 参考资料","categories":[{"name":"SZ 后端开发框架","slug":"SZ-后端开发框架","permalink":"http://loveinshenzhen.github.io/categories/SZ-后端开发框架/"},{"name":"快速入门","slug":"SZ-后端开发框架/快速入门","permalink":"http://loveinshenzhen.github.io/categories/SZ-后端开发框架/快速入门/"}],"tags":[]},{"title":"前后端分离","slug":"front_and_back_end","date":"2019-05-15T23:52:57.105Z","updated":"2019-05-16T08:58:40.234Z","comments":true,"path":"2019/05/16/front_and_back_end/","link":"","permalink":"http://loveinshenzhen.github.io/2019/05/16/front_and_back_end/","excerpt":"","text":"前后端分离 什么是前后端分离? 核心思想是前端 HTML纯静态页面 通过 Ajax 调用后端的 Http API 接口并使用 JSON 数据进行交互 前后端分离示意图 为什么要采用前后端分离的方式进行开发? 前端和后端开发人员的技术技能, 思维方式是不一样的 前端开发人员, 主要处理的问题是页面展现, 用户交互. 需要处理很多跟美术设计, 用户交互设计相关的问题. 后端开发人员, 主要处理的问题是业务逻辑如何实现, 数据如何查询,存储,更新. 从思维方式上可以看出, 前端对形象思维能力要求高, 而后端对逻辑思维能力要求高. 对普通人而言, 这2中思维方式很难同时拥有较高的水准. Web 前端 和 移动端App 可以重用后端的 Http Api 在生产环境下可以节省带宽, 从而降低成本费用 一般采用nginx做静态HTML页面的host, 启用 ETag. 现代的浏览器基本上都支持 ETag. 浏览器对静态资源访问过一次后就会缓存下了. 下次访问的时候, 服务端(Nginx)会检查请求中的ETag与当前请求的资源的ETag是否一致, 如果一致, 返回的Response会告诉浏览器,你要访问的静态资源, 与你缓存里的一致. 这样, 只要静态页面资源(html,js,css,img...)不发生变化, 后续的访问就不需要实际传输静态资源的内容了, 流量带宽就这么省下来了. 而数据部分, 是浏览器通过Ajax调用后端的Http Api获取的json数据, 而api占用的带宽资源相对于原来整个页面加载来说, 是很小的一部分. 并且, 对查询类的api, 后端也可以同样实现ETag的支持. 在部署时, 静态页面 和 Http Api 可以部署在不同的子域名下, 不同的子域名可以配置不同的外网IP, 设置不同的带宽. 具体的配置方法, 会在单独的 部署 分类的文当中细述 参考资料 ETag ETag 百度百科 初识HTTP缓存-ETag Nginx ETag配置(官网) Nginx配置启用ETag提高访问速度","categories":[{"name":"SZ 后端开发框架","slug":"SZ-后端开发框架","permalink":"http://loveinshenzhen.github.io/categories/SZ-后端开发框架/"},{"name":"关于前后端分离","slug":"SZ-后端开发框架/关于前后端分离","permalink":"http://loveinshenzhen.github.io/categories/SZ-后端开发框架/关于前后端分离/"}],"tags":[]},{"title":"欢迎使用SZ后端开发框架","slug":"welcome_to_use_sz","date":"2019-05-14T23:24:14.813Z","updated":"2019-05-16T16:24:08.728Z","comments":true,"path":"2019/05/15/welcome_to_use_sz/","link":"","permalink":"http://loveinshenzhen.github.io/2019/05/15/welcome_to_use_sz/","excerpt":"","text":"介绍 SZ 是一套基于 前后端分离 的思想, 专门用于 后端 (业务,应用服务器)的 快速开发框架. 开发语言: kotlin 中文站点 SZ 是从 Play Framework 中得到的启发, 底层框架是采用 vertx 为基础开发而来的. Java Web development without J2EE, 完全基于 J2SE, JDK 版本要求: JDK 8","categories":[{"name":"SZ 后端开发框架","slug":"SZ-后端开发框架","permalink":"http://loveinshenzhen.github.io/categories/SZ-后端开发框架/"},{"name":"简介","slug":"SZ-后端开发框架/简介","permalink":"http://loveinshenzhen.github.io/categories/SZ-后端开发框架/简介/"}],"tags":[]}]}